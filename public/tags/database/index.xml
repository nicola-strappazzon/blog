<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on Nicola Strappazzon</title>
    <link>http://localhost:1313/tags/database/</link>
    <description>Recent content in Database on Nicola Strappazzon</description>
    <generator>Hugo</generator>
    <language>es-es</language>
    <lastBuildDate>Sat, 27 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>El mito del &#39;código debe ser agnóstico a la base de datos&#39;</title>
      <link>http://localhost:1313/posts/codigo-agnostico-base-datos/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/codigo-agnostico-base-datos/</guid>
      <description>&lt;p&gt;Muchas veces nos dicen que &lt;strong&gt;el código debe ser agnóstico a la base de datos&lt;/strong&gt; y esto se debería de interpretarse de una forma, pero lo cierto es que es ambiguo y cada quien lo entiende a su forma y necesidad, vamos a explicar esta filosofía tan compleja y a su vez &lt;em&gt;conflictiva&lt;/em&gt;:&lt;/p&gt;&#xA;&lt;p&gt;El término &lt;a href=&#34;https://es.wikipedia.org/wiki/Agnosticismo&#34;&gt;agnóstico&lt;/a&gt; significa del griego &amp;ldquo;sin conocimiento&amp;rdquo;, y se cree que su origen surge cuando se crearon los primeros software intermedios llamados &lt;a href=&#34;https://en.wikipedia.org/wiki/Database_abstraction_layer&#34;&gt;DBAL/DAL&lt;/a&gt; que son librerías que ayudaban a la comunicación entre aplicación y base de datos, una &lt;a href=&#34;https://en.wikipedia.org/wiki/Application_programming_interface#Libraries_and_frameworks&#34;&gt;API&lt;/a&gt; más y no la del HTTP. De esta forma se puede abstraer el funcionamiento y crear compatibilidad con múltiples gestores de bases de datos usando el mismo código. Existen muchas variantes de este tipo de software, y pueden ser cualquiera de las siguientes variantes de nombres; DBAL, ODBC, ORM, ADO, PDO, DAL, Active Record, etc&amp;hellip; En este post no hablaremos qué hace cada una, sino filosofar.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Query review</title>
      <link>http://localhost:1313/posts/query-review/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/query-review/</guid>
      <description>&lt;p&gt;Lo complicado de hacer revisión de modelos de datos, es que venden un concepto acompañado del modelo en vez de ser objetivos y formular de forma abstracta el requerimiento sin tener un modelo para evitar prejuicios.&lt;/p&gt;&#xA;&lt;p&gt;Con una &lt;em&gt;Pull Request&lt;/em&gt;, lo que buscamos con estas &lt;strong&gt;buenas prácticas&lt;/strong&gt; es evaluar la propuesta de cambios con la finalidad de enterarnos, validar, estandarizar, y reducir problemas a futuro, de la misma forma que se hace con un codigo de backend o de frontend.&lt;/p&gt;</description>
    </item>
    <item>
      <title>El teorema CAP</title>
      <link>http://localhost:1313/posts/teorema-cap/</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/teorema-cap/</guid>
      <description>&lt;p&gt;Éste post me parece muy importante para poder entender como funcionan y hacer grandes sistemas pensados para escalar, sea por tráfico, por multi-sitio, multi-país, y más… todos estos sistemas distribuidos presentan la misma particularidad, y en el año 2000 un señor llamado &lt;a href=&#34;https://en.wikipedia.org/wiki/CAP_theorem&#34;&gt;Eric Brewer&lt;/a&gt;, pudo definir tres importantes propiedades y desarrollo un teorema. El se dio cuenta que mientras más aplicaciones basadas en la WEB existan, menos debemos preocuparnos por la consistencia de los datos, si queremos alta disponibilidad de nuestras aplicaciones entonces no podemos garantizar la consistencia de los datos.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Origen de la palabra NoSQL</title>
      <link>http://localhost:1313/posts/origen-nosql/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/origen-nosql/</guid>
      <description>&lt;p&gt;Ya desde los los años 1960s grandes empresas que ofrecían servicios y tenían múltiples de clientes, en consecuencia una gran fragmentación de datos y con inmensos volúmenes de datos para la época, se utilizaban base de datos al estilo del NoSQL, pero el nombre nace con el desarrollador Carlo Strozzi creó la base de datos relacional de código abierto Strozzi NoSQL en 1998, ligera, que no ofrecía una interface SQL, pero sí seguía el modelo ligeramente relacional. Strozzi sugiere que el actual movimiento NoSQL &amp;ldquo;Se sale completamente del modelo relacional, debería, por tanto, haberse llamado &amp;lsquo;NoREL&amp;rsquo;, o algo así.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bases de datos relacionales y no relacionales</title>
      <link>http://localhost:1313/posts/relacionales-vs-no-relacionales/</link>
      <pubDate>Sat, 24 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/relacionales-vs-no-relacionales/</guid>
      <description>&lt;p&gt;El gran dilema, bases de datos relacionales (&lt;a href=&#34;http://en.wikipedia.org/wiki/Relational_database_management_system&#34;&gt;RDBMS&lt;/a&gt;) y no relacionales (&lt;a href=&#34;http://martinfowler.com/bliki/NosqlDefinition.html&#34;&gt;NoSQL&lt;/a&gt;), todos preguntan, todos hablan de ello, estamos comparando cual es mejor, en fin, hay una gran incertidumbre en el tema, muchos apuntan a un extremo o al otro, cometen errores y nos olvidamos de ver con objetividad. Quiero explicar de que va todo esto de una forma simple para entendernos. Quiero recordar que grandes volúmenes de datos no son un simple millón de rows, son mucho más, billones por ejemplo, ahora imagina billones de rows que interactúan con otros billones de rows para generar información más significativa, cuando hay grandes volúmenes de información se aprecia todo de una forma diferente, esto impacta en tiempo y dinero.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rol de un DBA</title>
      <link>http://localhost:1313/posts/rol-dba/</link>
      <pubDate>Wed, 14 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/rol-dba/</guid>
      <description>&lt;p&gt;Puede que este papel hoy en día se este perdiendo, y se haya mezclado con los de Operaciones o con algún Desarrollador, está mal!, en proyectos grandes es muy importante dedicarle todo el tiempo posible, llega un momento que el volumen de datos y el tráfico se vuelve insostenible, a este punto, &lt;strong&gt;cuando algo falla es catastrófico y no suele arreglarse rápidamente&lt;/strong&gt;, la prevención es bastante crucial y se vuelve una eterna lucha.&lt;/p&gt;</description>
    </item>
    <item>
      <title>El modelo Atributos &amp; Tipos (EAV) o List of Values (LOV)</title>
      <link>http://localhost:1313/posts/eav-lof/</link>
      <pubDate>Sat, 30 Oct 2010 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/eav-lof/</guid>
      <description>&lt;p&gt;Durante el diseño de un correcto modelo relacional de una base de datos, no cabe la duda la implementación de un modelo genérico de tablas llamado “Atributos &amp;amp; Tipos” u otros lo llaman (EAV, Entity Attribute Value) en sus siglas en ingles, el cual aumenta la flexibilidad y robustez del mismo.&lt;/p&gt;&#xA;&lt;p&gt;La intención de este tipo de “patrón” de diseño por llamarlo de alguna forma, es que permite tener un dominio detallado sobre todos los atributos que podamos asignarle a cualquier elemento que es almacenado, en pocas palabras, cada registro habla por si solo y no tendrá libre interpretación, las aplicaciones que hacen uso de estos valores serán dominados directamente por el manejador de base de datos, y al final todo este proceso conlleva a una simple solución de auto-documentación e integridad de los datos.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Errores frecuentes en la normalización de una Base de Datos</title>
      <link>http://localhost:1313/posts/errores-frecuentes-normalizacion/</link>
      <pubDate>Thu, 05 Aug 2010 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/errores-frecuentes-normalizacion/</guid>
      <description>&lt;p&gt;En los trabajos que me e envuelto con base de datos, e visto un gran número de ellas, muchas echas por empresas pequeñas y medianas especializadas en el desarrollo, de cualquier sector; comercial, educativo o independientes, al final de todo, existe algo en común, y me llevo a una  conclusión, &amp;ldquo;&lt;strong&gt;Será que NO tienen la mas mínima y remota idea de ¿Cómo hacer un modelo físico y aprovechar todas las bondades de un manejador de base de datos?&lt;/strong&gt;&amp;rdquo;, y lo peor del caso, es que eso funciona milagrosamente y para ellos es indispensable toda su información &lt;em&gt;(obviamente)&lt;/em&gt;, pero tienen un problema en común, &lt;strong&gt;el sistema no funciona bien&lt;/strong&gt;, ¿Por qué será?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
